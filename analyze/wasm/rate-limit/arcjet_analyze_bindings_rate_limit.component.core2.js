// @generated by wasm2module - DO NOT EDIT
/* eslint-disable */
// @ts-nocheck

/**
 * This file contains an Arcjet Wasm binary inlined as a base64
 * [Data URL](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs)
 * with the application/wasm MIME type.
 *
 * This was chosen to save on storage space over inlining the file directly as
 * a Uint8Array, which would take up ~3x the space of the Wasm file. See
 * https://blobfolio.com/2019/better-binary-batter-mixing-base64-and-uint8array/
 * for more details.
 *
 * It is then decoded into an ArrayBuffer to be used directly via WebAssembly's
 * `compile()` function in our entry point file.
 *
 * This is all done to avoid trying to read or bundle the Wasm asset in various
 * ways based on the platform or bundler a user is targeting. One example being
 * that Next.js requires special `asyncWebAssembly` webpack config to load our
 * Wasm file if we don't do this.
 *
 * In the future, we hope to do away with this workaround when all bundlers
 * properly support consistent asset bundling techniques.
 */

const wasmBase64 = "data:application/wasm;base64,AGFzbQEAAAABEAJgA39/fwBgBn9/f39/fwADAwIAAQQFAXABAgIHFAMBMAAAATEAAQgkaW1wb3J0cwEACiMCDQAgACABIAJBABEAAAsTACAAIAEgAiADIAQgBUEBEQEACwAuCXByb2R1Y2VycwEMcHJvY2Vzc2VkLWJ5AQ13aXQtY29tcG9uZW50BjAuMjAuMABtBG5hbWUAExJ3aXQtY29tcG9uZW50OnNoaW0BUQIAJmluZGlyZWN0LWFyY2pldDpyYXRlLWxpbWl0L3N0b3JhZ2UtZ2V0ASZpbmRpcmVjdC1hcmNqZXQ6cmF0ZS1saW1pdC9zdG9yYWdlLXNldA==";
/**
 * Returns an ArrayBuffer for the Arcjet Wasm binary, decoded from a base64 Data
 * URL.
 */
// TODO: Switch back to top-level await when our platforms all support it
export async function wasm() {
  // This uses fetch to decode the wasm data url
  const wasmDecode = await fetch(wasmBase64);
  // And then we return it as an ArrayBuffer
  return wasmDecode.arrayBuffer();
}
